# Form implementation generated from reading ui file 'settingGui.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QDialog, QMessageBox, QComboBox
from PyQt6.QtCore import Qt, QEvent
from PyQt6.QtGui import QStandardItem


# class CheckableComboBox(QComboBox):
#     def __init__(self):
#         super().__init__()
#
#         # Make the combo editable to set a custom text, but readonly
#         self.setEditable(True)
#         self.lineEdit().setReadOnly(True)
#         # Update the text when an item is toggled
#         self.model().dataChanged.connect(self.updateText)
#
#         # Hide and show popup when clicking the line edit
#         self.lineEdit().installEventFilter(self)
#         self.closeOnLineEditClick = False
#
#         # Prevent popup from closing when clicking on an item
#         self.view().viewport().installEventFilter(self)
#
#     def resizeEvent(self, event):
#         # Recompute text to elide as needed
#         self.updateText()
#         super().resizeEvent(event)
#
#     def eventFilter(self, wdiget, event):
#         if wdiget == self.lineEdit():
#             if event.type() == QEvent.Type.MouseButtonRelease:
#                 if self.closeOnLineEditClick:
#                     self.hidePopup()
#                 else:
#                     self.showPopup()
#                 return True
#             return False
#
#         if wdiget == self.view().viewport():
#             if event.type() == QEvent.Type.MouseButtonRelease:
#                 index = self.view().indexAt(event.pos())
#                 item = self.model().item(index.row())
#
#                 if item.checkState() == Qt.CheckState.Checked:
#                     item.setCheckState(Qt.CheckState.Unchecked)
#                 else:
#                     item.setCheckState(Qt.CheckState.Checked)
#                 return True
#         return False

    # def showPopup(self):
    #     super().showPopup()
    #     # When the popup is displayed, a click on the lineedit should close it
    #     self.closeOnLineEditClick = True
    #
    # def hidePopup(self):
    #     super().hidePopup()
    #     # Used to prevent immediate reopening when clicking on the lineEdit
    #     self.startTimer(100)
    #     # Refresh the display text when closing
    #     self.updateText()
    #
    # def timerEvent(self, event):
    #     # After timeout, kill timer, and reenable click on line edit
    #     self.killTimer(event.timerId())
    #     self.closeOnLineEditClick = False
    #
    # def updateText(self):
    #     texts = []
    #     for i in range(self.model().rowCount()):
    #         if self.model().item(i).checkState() == Qt.CheckState.Checked:
    #             texts.append(self.model().item(i).text())
    #     text = ", ".join(texts)
    #     self.lineEdit().setText(text)
    #
    # def addItem(self, text, data=None):
    #     item = QStandardItem()
    #     item.setText(text)
    #     if data is None:
    #         item.setData(text)
    #     else:
    #         item.setData(data)
    #     item.setFlags(Qt.ItemFlag.ItemIsEnabled | Qt.ItemFlag.ItemIsUserCheckable)
    #     item.setData(Qt.CheckState.Unchecked, Qt.ItemDataRole.CheckStateRole)
    #     self.model().appendRow(item)
    #
    # def addItems(self, texts, datalist=None):
    #     datalist = texts
    #     for i, text in enumerate(texts):
    #         try:
    #             data = str(datalist[i][0])
    #         except (TypeError, IndexError):
    #             data = None
    #         self.addItem(text[1], data)
    #
    # def currentData(self):
    #     # Return the list of selected items data
    #     res = []
    #     for i in range(self.model().rowCount()):
    #         if self.model().item(i).checkState() == Qt.CheckState.Checked:
    #             res.append(self.model().item(i).data())
    #     return res


class Ui_DialogSetting():
    # def __init__(self, database):
    #     super().__init__()
    #     self.database = database
    #     self.fb_list = {}
    #     self.reseult = {}

    def setupUi(self, DialogSetting):
        self.dialog = DialogSetting
        DialogSetting.setObjectName("DialogSetting")
        DialogSetting.resize(600, 400)
        self.verticalLayout = QtWidgets.QVBoxLayout(DialogSetting)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(DialogSetting)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.comboBox = QtWidgets.QComboBox(DialogSetting)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox.sizePolicy().hasHeightForWidth())
        self.comboBox.setSizePolicy(sizePolicy)
        self.comboBox.setMinimumSize(QtCore.QSize(0, 35))
        self.comboBox.setCurrentText("Chọn tài khoản")
        self.comboBox.setObjectName("comboBox")

        # self.render_list_fb()

        self.horizontalLayout.addWidget(self.comboBox)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.checkBox_2 = QtWidgets.QCheckBox(DialogSetting)
        self.checkBox_2.setObjectName("checkBox_2")

        # self.checkBox_2.stateChanged.connect(self.select_checkbox)
        self.horizontalLayout_2.addWidget(self.checkBox_2)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.label_2 = QtWidgets.QLabel(DialogSetting)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.comboBox_2 = QtWidgets.QComboBox(DialogSetting)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_2.sizePolicy().hasHeightForWidth())
        self.comboBox_2.setSizePolicy(sizePolicy)
        self.comboBox_2.setMinimumSize(QtCore.QSize(152, 35))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.setEnabled(False)

        # self.comboBox_2.currentTextChanged.connect(self.select_checkbox)
        self.horizontalLayout_2.addWidget(self.comboBox_2)
        self.label_3 = QtWidgets.QLabel(DialogSetting)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_2.addWidget(self.label_3)
        self.comboBox_3 = QtWidgets.QComboBox(DialogSetting)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_3.sizePolicy().hasHeightForWidth())
        self.comboBox_3.setSizePolicy(sizePolicy)
        self.comboBox_3.setMinimumSize(QtCore.QSize(155, 35))
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.setEnabled(False)

        # self.comboBox_3.currentTextChanged.connect(self.select_checkbox)
        self.horizontalLayout_2.addWidget(self.comboBox_3)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.checkBox = QtWidgets.QCheckBox(DialogSetting)
        self.checkBox.setObjectName("checkBox")

        # self.checkBox.stateChanged.connect(self.select_checkbox)
        self.horizontalLayout_3.addWidget(self.checkBox)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem1)
        self.label_4 = QtWidgets.QLabel(DialogSetting)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_3.addWidget(self.label_4)
        # self.comboBox_4 = QtWidgets.QComboBox(DialogSetting)

        # self.comboBox_4.setEnabled(False)

        # self.comboBox_4.currentTextChanged.connect(self.select_checkbox)

        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.checkBox_3 = QtWidgets.QCheckBox(DialogSetting)
        self.checkBox_3.setObjectName("checkBox_3")

        # self.checkBox_3.stateChanged.connect(self.select_checkbox)
        self.horizontalLayout_5.addWidget(self.checkBox_3)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem2)
        self.textEdit = QtWidgets.QTextEdit(DialogSetting)
        self.textEdit.setMinimumSize(QtCore.QSize(417, 0))
        self.textEdit.setMaximumSize(QtCore.QSize(16777215, 100))
        self.textEdit.setObjectName("textEdit")
        # self.textEdit.setText("Nội dung comment bài viết")
        self.textEdit.setPlaceholderText("Nội dung comment bài viết")
        self.horizontalLayout_5.addWidget(self.textEdit)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.checkBox_4 = QtWidgets.QCheckBox(DialogSetting)
        self.checkBox_4.setObjectName("checkBox_4")

        # self.checkBox_4.stateChanged.connect(self.select_checkbox)
        self.horizontalLayout_6.addWidget(self.checkBox_4)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem3)
        self.textEdit_2 = QtWidgets.QTextEdit(DialogSetting)
        self.textEdit_2.setMinimumSize(QtCore.QSize(417, 0))
        self.textEdit_2.setObjectName("textEdit_2")
        self.textEdit_2.setPlaceholderText("Nội dung comment video")
        self.horizontalLayout_6.addWidget(self.textEdit_2)
        self.verticalLayout.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.toolButton = QtWidgets.QToolButton(DialogSetting)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolButton.sizePolicy().hasHeightForWidth())
        self.toolButton.setSizePolicy(sizePolicy)
        self.toolButton.setMinimumSize(QtCore.QSize(0, 35))
        self.toolButton.setObjectName("toolButton")
        self.horizontalLayout_4.addWidget(self.toolButton)

        # self.toolButton.clicked.connect(self.add_run_script)
        self.toolButton_2 = QtWidgets.QToolButton(DialogSetting)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolButton_2.sizePolicy().hasHeightForWidth())
        self.toolButton_2.setSizePolicy(sizePolicy)
        self.toolButton_2.setMinimumSize(QtCore.QSize(0, 35))
        self.toolButton_2.setObjectName("toolButton_2")

        # self.toolButton_2.clicked.connect(self.close_dialog)
        self.horizontalLayout_4.addWidget(self.toolButton_2)
        self.verticalLayout.addLayout(self.horizontalLayout_4)

        # self.render_list_post()
        # self.render_list_group()

        self.retranslateUi(DialogSetting)
        QtCore.QMetaObject.connectSlotsByName(DialogSetting)

    def retranslateUi(self, DialogSetting):
        _translate = QtCore.QCoreApplication.translate
        DialogSetting.setWindowTitle(_translate("DialogSetting", "Cấu hình kịch bản"))
        self.label.setText(_translate("DialogSetting", "Chọn tài khoản"))
        self.checkBox_2.setText(_translate("DialogSetting", "Đăng group"))
        self.label_2.setText(_translate("DialogSetting", "Nhóm"))
        self.label_3.setText(_translate("DialogSetting", "Bài viết"))
        self.checkBox.setText(_translate("DialogSetting", "Đăng bài"))
        self.label_4.setText(_translate("DialogSetting", "Bài viết"))
        self.checkBox_3.setText(_translate("DialogSetting", "Tương tác"))
        self.checkBox_4.setText(_translate("DialogSetting", "Comment video"))
        self.toolButton.setText(_translate("DialogSetting", "Lưu"))
        self.toolButton_2.setText(_translate("DialogSetting", "ĐÓng"))

    # def render_list_fb(self):
    #     fb_list = self.database.get_list_fb(table_name='account_fb')
    #     if fb_list['check']:
    #         for fb in fb_list['data']:
    #             self.fb_list[fb[0].strip()] = fb
    #             self.comboBox.addItem(f"{fb[0]}|{fb[1]}")
    #     else:
    #         QMessageBox.about(self, 'Thông báo', 'Không có tài khoản nào được tìm thấy')
    #
    # def render_list_group(self):
    #     # self.comboBox_2.setEnabled(True)
    #     self.comboBox_2.clear()
    #     uid = self.comboBox.currentText().split('|')[0].strip()
    #     list_group_key = self.database.get_list_group_key(uid)
    #     # print(list_group_key['data'])
    #     if list_group_key['check']:
    #         if list_group_key['data']:
    #             for list_group in list_group_key['data']:
    #                 # self.fb_list[fb[0].strip()] = fb
    #                 self.comboBox_2.addItem(f"{str(list_group[0])}|{list_group[2]}")
    #         else:
    #             self.comboBox_2.clear()
    #             self.comboBox_2.setEnabled(False)
    #     else:
    #         QMessageBox.about(self, 'Thông báo', 'Không có danh sách nhóm')
    #
    # def render_list_post(self):
    #     list_post = self.database.get_list_post()
    #     if list_post['check']:
    #         self.comboBox_4.addItems(list_post['data'])
    #         for post in list_post['data']:
    #             # self.fb_list[fb[0].strip()] = fb
    #             self.comboBox_3.addItem(f"{str(post[0])}|{post[1]}")
    #             # self.comboBox_4.addItem(f"{str(post[0])}|{post[1]}")
    #     else:
    #         QMessageBox.about(self, 'Thông báo', 'Không có bài viết')
    #
    # def close_dialog(self):
    #     self.dialog.close()
    #
    # def select_checkbox(self):
    #     self.reseult['fb_id'] = self.comboBox.currentText().split('|')[0].strip()
    #     if self.checkBox_2.isChecked():
    #         self.comboBox_2.setEnabled(True)
    #         self.comboBox_3.setEnabled(True)
    #         self.reseult['group_key'] = self.comboBox_2.currentText().split('|')[0].strip()
    #         self.reseult['id_post'] = self.comboBox_3.currentText().split('|')[0].strip()
    #     else:
    #         self.reseult['group_key'] = ""
    #         self.reseult['id_post'] = ""
    #
    #     if self.checkBox.isChecked():
    #         self.comboBox_4.setEnabled(True)
    #         print(self.comboBox_4.currentData())
    #         self.reseult['post_wall'] = self.comboBox_4.currentData()
    #     else:
    #         self.reseult['post_wall'] = []
    #
    #     if self.checkBox_3.isChecked():
    #         self.reseult['comment_post'] = self.textEdit.toPlainText()
    #     else:
    #         self.reseult['comment_post'] = ""
    #
    #     if self.checkBox_4.isChecked():
    #         self.reseult['comment_video'] = self.textEdit_2.toPlainText()
    #     else:
    #         self.reseult['comment_video'] = ""
    #
    #     # print(self.reseult)
    #
    # def add_run_script(self):
    #     self.select_checkbox()
    #     print(self.reseult)
    #     message = self.database.insert_table_run_script(self.reseult)
    #     print(message)
    #     QMessageBox.about(self, "Thêm cấu hình kịch bản", message)

# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     DialogSetting = QtWidgets.QDialog()
#     ui = Ui_DialogSetting()
#     ui.setupUi(DialogSetting)
#     DialogSetting.show()
#     sys.exit(app.exec())
