# Form implementation generated from reading ui file 'PostManagerGui.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtWidgets
from PyQt6.QtWidgets import QMessageBox, QTableWidgetItem, QWidget
from PyQt6.QtCore import Qt
# from Tool_Facebook.Posts.AddPostUi import Ui_DialogAddPost


class Ui_DialogPost(QWidget):
    # def __init__(self, database):
    #     super().__init__()
    #     self.database = database

    def setupUi(self, DialogPost):
        DialogPost.setObjectName("DialogPost")
        DialogPost.resize(600, 400)
        self.verticalLayout = QtWidgets.QVBoxLayout(DialogPost)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.lineEdit_search = QtWidgets.QLineEdit(DialogPost)
        self.lineEdit_search.setMinimumSize(QtCore.QSize(0, 35))
        self.lineEdit_search.setObjectName("lineEdit_search")
        self.horizontalLayout.addWidget(self.lineEdit_search)
        self.pushButton_search = QtWidgets.QPushButton(DialogPost)
        self.pushButton_search.setMinimumSize(QtCore.QSize(0, 35))
        self.pushButton_search.setObjectName("pushButton_search")


        self.horizontalLayout.addWidget(self.pushButton_search)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.tableWidgetPost = QtWidgets.QTableWidget(DialogPost)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tableWidgetPost.sizePolicy().hasHeightForWidth())
        self.tableWidgetPost.setSizePolicy(sizePolicy)
        self.tableWidgetPost.setObjectName("tableWidgetPost")
        self.tableWidgetPost.setColumnCount(6)
        self.tableWidgetPost.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetPost.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetPost.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetPost.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetPost.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetPost.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetPost.setHorizontalHeaderItem(5, item)
        self.tableWidgetPost.horizontalHeader().setDefaultSectionSize(100)
        self.verticalLayout.addWidget(self.tableWidgetPost)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.toolButton_get_list = QtWidgets.QToolButton(DialogPost)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolButton_get_list.sizePolicy().hasHeightForWidth())
        self.toolButton_get_list.setSizePolicy(sizePolicy)
        self.toolButton_get_list.setMinimumSize(QtCore.QSize(0, 35))
        self.toolButton_get_list.setObjectName("toolButton_get_list")

        # self.toolButton_get_list.clicked.connect(self.get_post)
        self.horizontalLayout_2.addWidget(self.toolButton_get_list)
        self.toolButton_add = QtWidgets.QToolButton(DialogPost)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolButton_add.sizePolicy().hasHeightForWidth())
        self.toolButton_add.setSizePolicy(sizePolicy)
        self.toolButton_add.setMinimumSize(QtCore.QSize(0, 35))
        self.toolButton_add.setObjectName("toolButton_add")

        # self.toolButton_add.clicked.connect(self.show_add_post)
        self.horizontalLayout_2.addWidget(self.toolButton_add)
        self.toolButton_edit = QtWidgets.QToolButton(DialogPost)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolButton_edit.sizePolicy().hasHeightForWidth())
        self.toolButton_edit.setSizePolicy(sizePolicy)
        self.toolButton_edit.setMinimumSize(QtCore.QSize(0, 35))
        self.toolButton_edit.setObjectName("toolButton_edit")

        # self.toolButton_edit.clicked.connect(self.show_edit_post)
        self.horizontalLayout_2.addWidget(self.toolButton_edit)
        self.toolButton_del = QtWidgets.QToolButton(DialogPost)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolButton_del.sizePolicy().hasHeightForWidth())
        self.toolButton_del.setSizePolicy(sizePolicy)
        self.toolButton_del.setMinimumSize(QtCore.QSize(0, 35))
        self.toolButton_del.setObjectName("toolButton_del")

        # self.toolButton_del.clicked.connect(self.delete_post)
        self.horizontalLayout_2.addWidget(self.toolButton_del)
        self.verticalLayout.addLayout(self.horizontalLayout_2)

        # self.get_post()
        self.retranslateUi(DialogPost)
        QtCore.QMetaObject.connectSlotsByName(DialogPost)

    def retranslateUi(self, DialogPost):
        _translate = QtCore.QCoreApplication.translate
        DialogPost.setWindowTitle(_translate("DialogPost", "Quản lý bài viết"))
        self.lineEdit_search.setPlaceholderText(_translate("DialogPost", "Nhập tiêu đề cần tìm kiếm"))
        self.pushButton_search.setText(_translate("DialogPost", "Tìm"))
        item = self.tableWidgetPost.horizontalHeaderItem(0)
        item.setText(_translate("DialogPost", "id"))
        item = self.tableWidgetPost.horizontalHeaderItem(1)
        item.setText(_translate("DialogPost", "Tiêu đề"))
        item = self.tableWidgetPost.horizontalHeaderItem(2)
        item.setText(_translate("DialogPost", "Nội dung"))
        item = self.tableWidgetPost.horizontalHeaderItem(3)
        item.setText(_translate("DialogPost", "Hình ảnh"))
        item = self.tableWidgetPost.horizontalHeaderItem(4)
        item.setText(_translate("DialogPost", "Ghi chú"))
        item = self.tableWidgetPost.horizontalHeaderItem(5)
        item.setText(_translate("DialogPost", "Trạng thái"))
        self.toolButton_get_list.setText(_translate("DialogPost", "Bài viết"))
        self.toolButton_add.setText(_translate("DialogPost", "Thêm"))
        self.toolButton_edit.setText(_translate("DialogPost", "Sửa"))
        self.toolButton_del.setText(_translate("DialogPost", "Xóa"))

    # def show_add_post(self):
    #     dialog = QtWidgets.QDialog()
    #     ui = Ui_DialogAddPost(self.database)
    #     ui.setupUi(dialog)
    #     dialog.exec()
    #
    # def show_edit_post(self):
    #     post = self.select_post()
    #     if post:
    #         dialog = QtWidgets.QDialog()
    #         ui = Ui_DialogAddPost(self.database, post)
    #         ui.setupUi(dialog)
    #         dialog.exec()
    #     else:
    #         QMessageBox.warning(self, "Thông báo", "Vui lòng chọn 1 tài khoản để sửa")
    #
    # def render_post(self, posts):
    #     self.tableWidgetPost.setRowCount(0)
    #     for post in posts:
    #         rows = self.tableWidgetPost.rowCount()
    #         self.tableWidgetPost.setRowCount(rows + 1)
    #         item = QTableWidgetItem(str(post[0]))
    #         item.setFlags(Qt.ItemFlag.ItemIsUserCheckable | Qt.ItemFlag.ItemIsEnabled)
    #         item.setCheckState(Qt.CheckState.Unchecked)
    #         self.tableWidgetPost.setItem(rows, 0, item)
    #         for idx, item in enumerate(post):
    #             if idx > 0:
    #                 self.tableWidgetPost.setItem(rows, idx, QTableWidgetItem(str(item)))
    #     self.tableWidgetPost.resizeColumnsToContents()
    #
    # def get_post(self):
    #     post_list = self.database.get_list_fb(table_name='post')
    #     if post_list['check']:
    #         self.render_post(post_list['data'])
    #         # for post in post_list['data']:
    #         #     self.fb_list[fb[0].strip()] = fb
    #         #     self.comboBox.addItem(f"{fb[0]}|{fb[1]}")
    #     else:
    #         QMessageBox.about(self, 'Thông báo', 'Không có tài khoản nào được tìm thấy')
    #
    # def select_post(self):
    #     rows = self.tableWidgetPost.rowCount()
    #     columns = self.tableWidgetPost.columnCount()
    #     data = []
    #     for row in range(rows):
    #         if self.tableWidgetPost.item(row, 0).checkState() == Qt.CheckState.Checked:
    #             for col in range(columns):
    #                 data.append(self.tableWidgetPost.item(row, col).text())
    #             return data
    #
    #     return None
    #
    # def delete_post(self):
    #     rows = self.tableWidgetPost.rowCount()
    #     for row in range(rows):
    #         if self.tableWidgetPost.item(row, 0).checkState() == Qt.CheckState.Checked:
    #             result = self.database.delete_table_post(self.tableWidgetPost.item(row, 0).text())
    #             if not result:
    #                 QMessageBox.critical(self, 'Xóa tài khoản', 'Xóa tài khoản không thành công')
    #
    #     self.get_post()
    #
    # def search_post(self):
    #     title = self.lineEdit_search.text()
    #     post_list = self.database.search_post(title)
    #     if post_list['check']:
    #         self.render_post(post_list['data'])
    #     else:
    #         QMessageBox.about(self, 'Thông báo', 'Không có tài khoản nào được tìm thấy')




# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     DialogPost = QtWidgets.QDialog()
#     ui = Ui_DialogPost()
#     ui.setupUi(DialogPost)
#     DialogPost.show()
#     sys.exit(app.exec())
